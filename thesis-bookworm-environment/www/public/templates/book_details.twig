{% extends "base.twig" %}

{% block title %}Book Details{% endblock %}

{% block content %}
    {% include 'menu.twig' %}
    <main class="container">
        <section class="book-details">
            {% if book %}
                <div>
                    <h1>{{ book.title }}</h1>
                    <div class="book-info">
                        <div class="book-section">
                            <h2>Author(s)</h2>
                            <p>{{ book.author|join(', ') }}</p>
                        </div>
                        <div class="book-section">
                            <h2>Description</h2>
                            <p>{{ book.description }}</p>
                        </div>
                        <div class="book-section">
                            <h2>Number of Pages</h2>
                            <p>
                                {% if book.pages > 0 %}
                                    {{ book.pages }}
                                {% else %}
                                    Not Specified
                                {% endif %}
                            </p>
                        </div>
                    </div>
                    <div class="cover-container">
                        <img class="book-cover" src="{{ book.cover }}" alt="{{ book.title }} cover">
                    </div>
                </div>

                <!-- Rating & Review Section -->
                <div class="rating-review-section">
                    <div class="rating-section">
                        <h2>Rate This Book</h2>
                        <label for="rating"></label>
                        <select name="rating" id="rating">
                            <option value="1">1 Star</option>
                            <option value="2">2 Stars</option>
                            <option value="3">3 Stars</option>
                            <option value="4">4 Stars</option>
                            <option value="5">5 Stars</option>
                        </select>
                        <input type="hidden" id="bookId" value="{{ book.id }}">
                        <input type="hidden" id="userId" value="{{ userId }}">
                        <div class="button-container">
                            <button onclick="submitRating()">Submit Rating</button>
                        </div>
                    </div>
                    <div class="review-section">
                        <h2>Write a Review</h2>
                        <label for="review"></label>
                        <textarea name="review" id="review" cols="30" rows="5" placeholder="Write your review here"></textarea>
                        <input type="hidden" id="bookId" value="{{ book.id }}">
                        <input type="hidden" id="userId" value="{{ userId }}">
                        <div class="button-container">
                            <button onclick="submitReview()">Submit Review</button>
                        </div>
                    </div>
                </div>

                <!-- Total Rating -->
                <div class="total-rating" id="total-rating">
                    <h2>Overall Rating</h2>
                    <p>Loading...</p>
                </div>

                <!-- Ratings -->
                <div class="ratings" id="ratings">
                    <h2>Ratings</h2>
                    <ul>
                        <li>Loading...</li>
                    </ul>
                </div>

                <!-- Reviews -->
                <div class="reviews" id="reviews">
                    <h2>Reviews</h2>
                    <ul>
                        <li>Loading...</li>
                    </ul>
                </div>
            {% else %}
                <h1>Book Not Found</h1>
            {% endif %}
        </section>
    </main>
    <script>
        function fetchRatingsAndReviews() {
            const bookId = {{ book.id }};

            fetch(`/catalogue/${bookId}/ratings`)
                .then(response => response.json())
                .then(data => {
                    const ratingsList = document.querySelector('#ratings ul');
                    const totalRatingElement = document.querySelector('#total-rating p');
                    ratingsList.innerHTML = '';
                    
                    let totalRating = 0;
                    data.forEach(rating => {
                        totalRating += rating.rating;
                        const listItem = document.createElement('li');
                        listItem.innerHTML = `<strong>${rating.username}</strong>: ${rating.rating} Stars`;
                        if (rating.user_id == {{ userId }}) {
                            const deleteButton = document.createElement('button');
                            deleteButton.classList.add("delete-rating-review")
                            deleteButton.textContent = 'Delete';
                            deleteButton.onclick = () => deleteRating(rating.id);
                            listItem.appendChild(deleteButton);
                        }
                        ratingsList.appendChild(listItem);
                    });

                    const averageRating = data.length > 0 ? (totalRating / data.length).toFixed(2) : 0;
                    totalRatingElement.textContent = `${averageRating} / 5 Stars (${data.length} Ratings)`;
                })
                .catch(error => console.error('Error fetching ratings:', error));

            fetch(`/catalogue/${bookId}/reviews`)
                .then(response => response.json())
                .then(data => {
                    const reviewsList = document.querySelector('#reviews ul');
                    reviewsList.innerHTML = '';
                    data.forEach(review => {
                        const listItem = document.createElement('li');
                        listItem.innerHTML = `<strong>${review.username}</strong>: ${review.review_text}`;
                        if (review.user_id == {{ userId }}) {
                            const deleteButton = document.createElement('button');
                            deleteButton.classList.add("delete-rating-review")
                            deleteButton.textContent = 'Delete';
                            deleteButton.onclick = () => deleteReview(review.id);
                            listItem.appendChild(deleteButton);
                        }
                        reviewsList.appendChild(listItem);
                    });
                })
                .catch(error => console.error('Error fetching reviews:', error));
        }

        function submitRating() {
            const rating = document.getElementById('rating').value;
            const bookId = document.getElementById('bookId').value;
            const userId = document.getElementById('userId').value;

            fetch(`/catalogue/${bookId}/rate`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    rating,
                    bookId,
                    userId
                })
            })
                .then(response => {
                    if (response.ok) {
                        alert('Rating submitted successfully');
                        fetchRatingsAndReviews();
                    } else {
                        alert('Failed to submit rating');
                    }
                })
                .catch(error => console.error('Error submitting rating:', error));
        }

        function deleteRating(ratingId) {
            fetch(`/catalogue/{{ book.id }}/rate`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ ratingId })
            })
                .then(response => {
                    if (response.ok) {
                        alert('Rating deleted successfully');
                        fetchRatingsAndReviews();
                    } else {
                        alert('Failed to delete rating');
                    }
                })
                .catch(error => console.error('Error deleting rating:', error));
        }

        function submitReview() {
            const review = document.getElementById('review').value;
            const bookId = document.getElementById('bookId').value;
            const userId = document.getElementById('userId').value;

            fetch(`/catalogue/${bookId}/review`, {
                method: 'PUT',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    review,
                    bookId,
                    userId
                })
            })
                .then(response => {
                    if (response.ok) {
                        alert('Review submitted successfully');
                        fetchRatingsAndReviews();
                    } else {
                        alert('Failed to submit review, only one review per user, delete your existing review first');
                    }
                })
                .catch(error => console.error('Error submitting review:', error));
        }

        function deleteReview(reviewId) {
            fetch(`/catalogue/{{ book.id }}/review`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ reviewId })
            })
                .then(response => {
                    if (response.ok) {
                        alert('Review deleted successfully');
                        fetchRatingsAndReviews();
                    } else {
                        alert('Failed to delete review');
                    }
                })
                .catch(error => console.error('Error deleting review:', error));
        }

        fetchRatingsAndReviews();
    </script>
{% endblock %}
